// <copyright file="PreOperationmsdyn_workorderUpdate.cs" company="">PreOperationmsdyn_workorderUpdate
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author>Hong Liu</author>
// <date>9/20/2018 10:21:27 AM</date>
// <summary>Implements the PreOperationmsdyn_workorderUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Query;

namespace TSIS2.Plugins
{

    [CrmPluginRegistration(
    MessageNameEnum.Update,
    "msdyn_workorder",
    StageEnum.PreOperation,
    ExecutionModeEnum.Synchronous,
    "",
    "TSIS2.Plugins.PreOperationmsdyn_workorderUpdate Plugin",
    1,
    IsolationModeEnum.Sandbox,
    Description = "On Work Order Update, populate the Regulated Entity into the Billing Account using the selected Operation")]
    /// <summary>
    /// PreOperationmsdyn_workorderUpdate Plugin.
    /// </summary>    
    public class PreOperationmsdyn_workorderUpdate : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            // Obtain the tracing service
            ITracingService tracingService =
            (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            tracingService.Trace("Tracking Service Started.");

            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));

            tracingService.Trace("The InputParameters collection contains all the data passed in the message request.");

            if (context.InputParameters.Contains("Target") &&
                context.InputParameters["Target"] is Entity)
            {

                tracingService.Trace("Obtain the target entity from the input parameters.");
                Entity target = (Entity)context.InputParameters["Target"];

                tracingService.Trace("Obtain the preimage entity.");
                Entity preImageEntity = (context.PreEntityImages != null && context.PreEntityImages.Contains("PreImage")) ? context.PreEntityImages["PreImage"] : null;


                tracingService.Trace("Obtain the organization service reference which is needed for web service calls.");
                IOrganizationServiceFactory serviceFactory =
                    (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

                try
                {
                    // Log the system username and Work Order at the start
                    var systemUser = service.Retrieve("systemuser", context.InitiatingUserId, new ColumnSet("fullname"));
                    var WOST = service.Retrieve("msdyn_workorder", context.PrimaryEntityId, new ColumnSet("msdyn_name"));
                    tracingService.Trace("Plugin executed by user: {0}", systemUser.GetAttributeValue<string>("fullname"));
                    tracingService.Trace("Work Order GUID: {0}", context.PrimaryEntityId);
                    tracingService.Trace("Work Order Name: {0}", WOST.GetAttributeValue<string>("msdyn_name"));

                    if (target.LogicalName.Equals(msdyn_workorder.EntityLogicalName))
                    {
                        if (target.Attributes.Contains("ovs_operationid") && target.Attributes["ovs_operationid"] != null)
                        {
                            EntityReference operation = (EntityReference)target.Attributes["ovs_operationid"];
                            using (var servicecontext = new Xrm(service))
                            {
                                var regulatedentity = (from tt in servicecontext.ovs_operationSet
                                                       where tt.Id == operation.Id
                                                       select new
                                                       {
                                                           tt.ts_stakeholder
                                                       }).FirstOrDefault();
                                if (regulatedentity != null)
                                {
                                    if (regulatedentity.ts_stakeholder != null && regulatedentity.ts_stakeholder.Id != null)
                                    {
                                        target.Attributes["msdyn_billingaccount"] = regulatedentity.ts_stakeholder;
                                    }
                                }
                            }
                        }

                        tracingService.Trace("If Case \"msdyn_servicerequest\" is updated.");
                        if (target.Attributes.Contains("msdyn_servicerequest"))
                        {
                            using (var serviceContext = new Xrm(service))
                            {
                                tracingService.Trace("Cast the target to the expected entity.");
                                msdyn_workorder workOrder = target.ToEntity<msdyn_workorder>();

                                tracingService.Trace("Retrieve all findings associated to the current Work Order.");
                                var workOrderFindings = serviceContext.ovs_FindingSet.Where(f => f.ts_WorkOrder.Id == workOrder.Id).ToList();

                                tracingService.Trace("Retrieve all Work Order Service Tasks associated to the current Work Order.");
                                var workOrderServiceTasks = serviceContext.msdyn_workorderservicetaskSet.Where(f => f.msdyn_WorkOrder.Id == workOrder.Id).ToList();

                                if (workOrder.msdyn_ServiceRequest != null)
                                {
                                    tracingService.Trace("Retrieve all files associated with the Work Order and update the associated case.");
                                    var allFiles = serviceContext.ts_FileSet.ToList();
                                    {
                                        var myWorkOrder = serviceContext.msdyn_workorderSet.Where(wo => wo.Id == workOrder.Id).FirstOrDefault();
                                        
                                        if (myWorkOrder != null)
                                        {
                                            var workOrderFiles = allFiles.Where(f => f.ts_formintegrationid != null && f.ts_formintegrationid.Replace("WO ", "").Trim() == myWorkOrder.msdyn_name).ToList();

                                            tracingService.Trace("Update the case for each associated file.");
                                            foreach (var workOrderFile in workOrderFiles)
                                            {
                                                service.Update(new ts_File
                                                {
                                                    Id = workOrderFile.Id,
                                                    ts_Incident = workOrder.msdyn_ServiceRequest
                                                });
                                            }
                                        }
                                    }

                                    tracingService.Trace("Change the reference to Case in each Work Order Service Task to the Work Order's new case.");
                                    foreach (msdyn_workorderservicetask workOrderServiceTask in workOrderServiceTasks)
                                    {
                                        service.Update(new msdyn_workorderservicetask
                                        {
                                            Id = workOrderServiceTask.Id,
                                            ovs_CaseId = workOrder.msdyn_ServiceRequest
                                        });

                                        tracingService.Trace("Retrieve all files associated with the Work Order service task and update the associated case.");
                                        {
                                            var workOrderServiceTasksFiles = allFiles.Where(f => f.ts_formintegrationid != null && f.ts_formintegrationid.Replace("WOST ", "").Trim() == workOrderServiceTask.msdyn_name).ToList();

                                            tracingService.Trace("Update the case for each associated file.");
                                            foreach (var workOrderServiceTasksFile in workOrderServiceTasksFiles)
                                            {
                                                service.Update(new ts_File
                                                {
                                                    Id = workOrderServiceTasksFile.Id,
                                                    ts_Incident = workOrder.msdyn_ServiceRequest
                                                });
                                            }
                                        }
                                    }

                                    tracingService.Trace("Change the reference to Case in each finding to the Work Order's new case.");
                                    foreach (ovs_Finding finding in workOrderFindings)
                                    {
                                        service.Update(new ovs_Finding
                                        {
                                            Id = finding.Id,
                                            ovs_CaseId = workOrder.msdyn_ServiceRequest
                                        });
                                    }

                                    tracingService.Trace("Find out if the Work Order has a recored in ts_sharepointfile.");
                                    {
                                        tracingService.Trace("Try catch here in case error occurs. Allows rest of the code in the method to run.");
                                        try
                                        {
                                            var myWorkOrderSharePointFile = PostOperationts_sharepointfileCreate.CheckSharePointFile(serviceContext, workOrder.Id.ToString().ToUpper().Trim(), PostOperationts_sharepointfileCreate.WORK_ORDER);

                                            tracingService.Trace("Retrieve the case.");
                                            var myWorkOrderCase = serviceContext.IncidentSet.Where(c => c.Id == workOrder.msdyn_ServiceRequest.Id).FirstOrDefault();

                                            var myWorkOrderCaseSharePointFile = PostOperationts_sharepointfileCreate.CheckSharePointFile(serviceContext, myWorkOrderCase.Id.ToString().Trim().ToUpper(), PostOperationts_sharepointfileCreate.CASE);

                                            string myOwner = "";

                                            Guid myWorkOrderCaseSharePointFileGroupID = new Guid();

                                            if (myWorkOrderCaseSharePointFile != null || myWorkOrderSharePointFile != null)
                                            {
                                                tracingService.Trace("Retrieve the owner.");
                                                myOwner = PostOperationts_sharepointfileCreate.GetWorkOrderOwner(service, workOrder.Id);

                                                tracingService.Trace("If SharePoint file for the Work Order does not exist.");
                                                if (myWorkOrderSharePointFile == null)
                                                {
                                                    tracingService.Trace("Retrieve Work Order Name.");
                                                    var myWorkOrderName = serviceContext.msdyn_workorderSet.Where(wo => wo.Id == workOrder.Id).FirstOrDefault().msdyn_name;

                                                    tracingService.Trace("Create the SharePoint file for the Work Order.");
                                                    Guid myWorkOrderSharePointFileID = PostOperationts_sharepointfileCreate.CreateSharePointFile(myWorkOrderName, PostOperationts_sharepointfileCreate.WORK_ORDER, PostOperationts_sharepointfileCreate.WORK_ORDER_FR, workOrder.Id.ToString().Trim().ToUpper(), myWorkOrderName, myOwner, service);

                                                    tracingService.Trace("Retrieve the SharePoint file.");
                                                    myWorkOrderSharePointFile = PostOperationts_sharepointfileCreate.CheckSharePointFile(serviceContext, workOrder.Id.ToString().Trim().ToUpper(), PostOperationts_sharepointfileCreate.WORK_ORDER);
                                                }

                                                if (myWorkOrderCaseSharePointFile == null)
                                                {
                                                    tracingService.Trace("Create the SharePoint file for the Case.");
                                                    Guid myWorkOrderCaseSharePointFileID = PostOperationts_sharepointfileCreate.CreateSharePointFile(myWorkOrderCase.Title, PostOperationts_sharepointfileCreate.CASE, PostOperationts_sharepointfileCreate.CASE_FR, myWorkOrderCase.Id.ToString().Trim().ToUpper(), myWorkOrderCase.Title, myOwner, service);

                                                    tracingService.Trace("Get the SharePoint file.");
                                                    myWorkOrderCaseSharePointFile = PostOperationts_sharepointfileCreate.CheckSharePointFile(serviceContext, myWorkOrderCase.Id.ToString().Trim().ToUpper(), PostOperationts_sharepointfileCreate.CASE);

                                                    tracingService.Trace("Create the SharePoint group.");
                                                    myWorkOrderCaseSharePointFileGroupID = PostOperationts_sharepointfileCreate.CreateSharePointFileGroup(myWorkOrderCaseSharePointFile, service);
                                                }
                                                else
                                                {
                                                    tracingService.Trace("Set the SharePoint file group from the existing SharePoint file for the case.");
                                                    myWorkOrderCaseSharePointFileGroupID = myWorkOrderCaseSharePointFile.ts_SharePointFileGroup.Id;
                                                }

                                                tracingService.Trace("Update everything related to the Case with the SharePoint File Group.");
                                                PostOperationts_sharepointfileCreate.UpdateRelatedWorkOrders(service, myWorkOrderCase.Id, myWorkOrderCaseSharePointFileGroupID, myOwner);

                                                tracingService.Trace("Update the Work Order SharePoint file group - we do this because we are in a pre-operation, so the Work Order is not officially related to the Case yet and won't be picked up by UpdateRelatedWorkOrders().");
                                                service.Update(new ts_SharePointFile
                                                {
                                                    Id = myWorkOrderSharePointFile.Id,
                                                    ts_SharePointFileGroup = myWorkOrderCaseSharePointFile.ts_SharePointFileGroup
                                                });

                                                tracingService.Trace("Update the Work Order Service Tasks that are related to the Work Order.");
                                                PostOperationts_sharepointfileCreate.UpdateRelatedWorkOrderServiceTasks(service, workOrder.Id, myWorkOrderCaseSharePointFileGroupID, myOwner);
                                            }
                                            else if (myWorkOrderCaseSharePointFile == null && myWorkOrderSharePointFile == null)
                                            {
                                                tracingService.Trace("Do nothing since the Case and Work Order don't have a ts_sharepoint file.");
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            tracingService.Trace("PreOperationmsdyn_workorderUpdate Plugin: Error handling ts_sharepointfile and ts_sharepointfilegroup logic {0}", ex.ToString());
                                        }
                                    }
                                }
                                else
                                {
                                    tracingService.Trace("Change the reference to Case in each Work Order Service Task to null.");
                                    foreach (msdyn_workorderservicetask workOrderServiceTask in workOrderServiceTasks)
                                    {
                                        service.Update(new msdyn_workorderservicetask
                                        {
                                            Id = workOrderServiceTask.Id,
                                            ovs_CaseId = null
                                        });
                                    }
                                    tracingService.Trace("Change the reference to Case in each finding to null.");
                                    foreach (ovs_Finding finding in workOrderFindings)
                                    {
                                        service.Update(new ovs_Finding
                                        {
                                            Id = finding.Id,
                                            ovs_CaseId = null
                                        });
                                    }
                                }
                            }
                        }
                        if (target.Attributes.Contains("msdyn_primaryincidenttype"))
                        {
                            using (var serviceContext = new Xrm(service))
                            {
                                tracingService.Trace("Cast the target to the expected entity.");
                                msdyn_workorder workOrder = target.ToEntity<msdyn_workorder>();

                                msdyn_workorder oldWorkOrder = serviceContext.msdyn_workorderSet.Where(wo => wo.Id == workOrder.Id).FirstOrDefault();

                                tracingService.Trace("Proceed only if the Work Order has new Activity Type and there was one prior to the update.");
                                if (workOrder.msdyn_PrimaryIncidentType != null && oldWorkOrder != null && oldWorkOrder.msdyn_PrimaryIncidentType != null)
                                {
                                    tracingService.Trace("Retrieve all Work Order Service Tasks associated to the current work order.");
                                    var workOrderServiceTasks = serviceContext.msdyn_workorderservicetaskSet.Where(f => (f.msdyn_WorkOrder.Id == workOrder.Id)).ToList();

                                    tracingService.Trace("Change the reference to Task Type in each New Work Order Service Task to the Work Order's Task Type.");
                                    foreach (msdyn_workorderservicetask workOrderServiceTask in workOrderServiceTasks)
                                    {
                                        if (workOrderServiceTask.statuscode == msdyn_workorderservicetask_statuscode.New)
                                        {
                                            service.Update(new msdyn_workorderservicetask
                                            {
                                                Id = workOrderServiceTask.Id,
                                                statecode = msdyn_workorderservicetaskState.Inactive,
                                                statuscode = msdyn_workorderservicetask_statuscode.Inactive,
                                                ts_Mandatory = false
                                            });
                                        }
                                    }
                                    var incidentTypeServiceTasks = serviceContext.msdyn_incidenttypeservicetaskSet.Where(f => f.msdyn_IncidentType.Id == workOrder.msdyn_PrimaryIncidentType.Id).ToList();
                                    var workOrderName = serviceContext.msdyn_workorderSet.Where(wo => wo.Id == workOrder.Id).FirstOrDefault().msdyn_name;

                                    tracingService.Trace("Set the prefix to be at the 200 level for work order service tasks.");
                                    var prefix = workOrderName.Replace("300-", "200-");

                                    tracingService.Trace("If there are previous work order service tasks, suffix = count + 1 else 1.");
                                    var suffix = (workOrderServiceTasks != null) ? workOrderServiceTasks.Count() + 1 : 1;


                                    foreach (msdyn_incidenttypeservicetask incidentTypeServiceTask in incidentTypeServiceTasks)
                                    {
                                        service.Create(new msdyn_workorderservicetask
                                        {
                                            msdyn_name = string.Format("{0}-{1}", prefix, suffix),
                                            msdyn_TaskType = incidentTypeServiceTask.msdyn_TaskType,
                                            msdyn_WorkOrder = new EntityReference(msdyn_workorder.EntityLogicalName, workOrder.Id)
                                        });
                                    }
                                    serviceContext.SaveChanges();
                                }
                            }
                        }

                        if (target.Attributes.Contains("msdyn_systemstatus"))
                        {
                            using (var serviceContext = new Xrm(service))
                            {
                                tracingService.Trace("Cast the target to the expected entity.");
                                msdyn_workorder workOrder = target.ToEntity<msdyn_workorder>();
                                if (workOrder.msdyn_SystemStatus == msdyn_wosystemstatus.Closed)
                                {
                                    msdyn_workorder oldWorkOrder = serviceContext.msdyn_workorderSet.Where(wo => wo.Id == workOrder.Id).FirstOrDefault();

                                    tracingService.Trace("Update the closed values only if either are null.");
                                    if (oldWorkOrder != null && context.InitiatingUserId != null && (oldWorkOrder.msdyn_TimeClosed == null || oldWorkOrder.msdyn_ClosedBy == null))
                                    {
                                        target["msdyn_timeclosed"] = DateTime.UtcNow;
                                        target["msdyn_closedby"] = new EntityReference(SystemUser.EntityLogicalName, context.InitiatingUserId);

                                    }

                                    tracingService.Trace("Check if there are any related Operation Activities.");
                                    string workOrderId = target.Id.ToString();

                                    Guid workOrderGuid = new Guid(workOrderId);

                                    Entity workOrderNumber = service.Retrieve("msdyn_workorder", workOrderGuid, new ColumnSet("msdyn_name"));

                                    string woName = workOrderNumber.GetAttributeValue<string>("msdyn_name");

                                    if (woName != null)
                                    {
                                        string fetchXML = $@"
                                            <fetch xmlns:generator='MarkMpn.SQL4CDS'>
                                              <entity name='ts_operationactivity'>
                                                <attribute name='ts_operationactivityid' />
                                                <link-entity name='ovs_operation' to='ts_operation' from='ovs_operationid' alias='ovs_operation' link-type='inner'>
                                                  <attribute name='ovs_operationid' />
                                                  <link-entity name='msdyn_workorder' to='ovs_operationid' from='ovs_operationid' alias='msdyn_workorder' link-type='inner'>
                                                    <attribute name='msdyn_workorderid' />
                                                    <filter>
                                                      <condition attribute='msdyn_name' operator='eq' value='{woName}' />
                                                    </filter>
                                                    <order attribute='msdyn_workorderid' />
                                                  </link-entity>
                                                  <order attribute='ovs_operationid' />
                                                </link-entity>
                                                <filter>
                                                  <condition attribute='ts_activity' operator='eq' valueof='msdyn_workorder.msdyn_primaryincidenttype' />
                                                </filter>
                                                <order attribute='ts_operationactivityid' />
                                              </entity>
                                            </fetch>
                                        ";

                                        EntityCollection operationActivityCollection = service.RetrieveMultiple(new FetchExpression(fetchXML));

                                        if (operationActivityCollection.Entities.Count == 0)
                                        {
                                            return;
                                        }

                                        else
                                        {
                                            tracingService.Trace("Retrieve the operation activity ID record.");
                                            Guid operationActivityId = operationActivityCollection.Entities[0].Id;

                                            Entity operationActivity = service.Retrieve("ts_operationactivity", operationActivityId, new ColumnSet("ts_closedondatemostrecentwo"));

                                            tracingService.Trace("Update ts_closedondatemostrecentwo with current date.");
                                            operationActivity["ts_closedondatemostrecentwo"] = DateTime.UtcNow;

                                            service.Update(operationActivity);
                                        }

                                    }
                                }
                            }
                        }

                        int UserLanguage = LocalizationHelper.RetrieveUserUILanguageCode(service, context.InitiatingUserId);
                        string ResourceFile = "ovs_/resx/WorkOrder.1033.resx";
                        if (UserLanguage == 1036) //French
                        {
                            ResourceFile = "ovs_/resx/WorkOrder.1036.resx";
                        }
                        if (target.Attributes.Contains("ownerid") && target.GetAttributeValue<EntityReference>("ownerid").Id != context.InitiatingUserId)
                        {
                            tracingService.Trace("Ownerid is changing to {0} by {1} ", target.GetAttributeValue<EntityReference>("ownerid").Id, context.InitiatingUserId);
                            using (var servicecontext = new Xrm(service))
                            {
                                var currentUser = servicecontext.SystemUserSet.Where(u => u.Id == context.InitiatingUserId).FirstOrDefault();
                                var updatedOwnerUser = servicecontext.SystemUserSet.Where(u => u.Id == target.GetAttributeValue<EntityReference>("ownerid").Id).FirstOrDefault();

                                if (updatedOwnerUser != null)
                                {
                                    tracingService.Trace("If currentUser is not dual inspector.");
                                    if (!currentUser.GetAttributeValue<bool>("ts_dualinspector"))
                                    {
                                        tracingService.Trace("If updatedOwnerUser is not dual inspector.");
                                        if (!updatedOwnerUser.GetAttributeValue<bool>("ts_dualinspector"))
                                        {
                                            if (currentUser.GetAttributeValue<EntityReference>("businessunitid").Name.StartsWith("Aviation"))
                                            {
                                                if (!updatedOwnerUser.GetAttributeValue<EntityReference>("businessunitid").Name.StartsWith("Aviation") ||
                                                updatedOwnerUser.GetAttributeValue<EntityReference>("businessunitid").Name.Contains("PPP"))
                                                {
                                                    throw new InvalidPluginExecutionException(LocalizationHelper.GetMessage(tracingService, service, ResourceFile, "ReassignWorkOrderErrorMsg"));
                                                }
                                            }
                                            else
                                            {
                                                if (currentUser.GetAttributeValue<EntityReference>("businessunitid").Id != updatedOwnerUser.GetAttributeValue<EntityReference>("businessunitid").Id &&
                                                !currentUser.GetAttributeValue<EntityReference>("businessunitid").Name.Equals("Transport Canada", StringComparison.OrdinalIgnoreCase))
                                                {
                                                    throw new InvalidPluginExecutionException(LocalizationHelper.GetMessage(tracingService, service, ResourceFile, "ReassignWorkOrderErrorMsg"));
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    var updatedOwnerTeam = servicecontext.TeamSet.Where(u => u.Id == target.GetAttributeValue<EntityReference>("ownerid").Id).FirstOrDefault();
                                    if (updatedOwnerTeam != null && currentUser.GetAttributeValue<EntityReference>("businessunitid").Id != updatedOwnerTeam.GetAttributeValue<EntityReference>("businessunitid").Id &&
                                    !currentUser.GetAttributeValue<EntityReference>("businessunitid").Name.Equals("Transport Canada", StringComparison.OrdinalIgnoreCase))
                                    {
                                        throw new InvalidPluginExecutionException(LocalizationHelper.GetMessage(tracingService, service, ResourceFile, "ReassignWorkOrderErrorMsg"));
                                    }
                                }

                            }
                        }

                        if (preImageEntity != null)
                        {
                            msdyn_workorder workOrderPreImage = preImageEntity.ToEntity<msdyn_workorder>();

                            if (target.Attributes.Contains("ovs_fiscalquarter") && workOrderPreImage.Attributes.Contains("ovs_fiscalquarter") && target.GetAttributeValue<EntityReference>("ovs_fiscalquarter").Id != workOrderPreImage.GetAttributeValue<EntityReference>("ovs_fiscalquarter").Id)
                            {
                                using (var servicecontext = new Xrm(service))
                                {
                                    var tripInspectionQuery = new QueryExpression("ts_tripinspection");
                                    tripInspectionQuery.ColumnSet.AddColumns("ts_trip");
                                    tripInspectionQuery.Criteria.AddCondition("ts_inspection", ConditionOperator.Equal, workOrderPreImage.Id);
                                    var tripInspections = service.RetrieveMultiple(tripInspectionQuery);
                                    if (tripInspections != null && tripInspections.Entities.Count > 0)
                                    {
                                        Entity trip = service.Retrieve(tripInspections.Entities[0].GetAttributeValue<EntityReference>("ts_trip").LogicalName, tripInspections.Entities[0].GetAttributeValue<EntityReference>("ts_trip").Id, new ColumnSet("ts_plannedfiscalquarter"));
                                        if (target.GetAttributeValue<EntityReference>("ovs_fiscalquarter").Id != trip.GetAttributeValue<EntityReference>("ts_plannedfiscalquarter").Id)
                                        {
                                            throw new InvalidPluginExecutionException(LocalizationHelper.GetMessage(tracingService, service, ResourceFile, "InvalidFiscalQuarterErrorMsg"));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    throw new InvalidPluginExecutionException(e.Message);
                }

            }
        }
    }
}