// <copyright file="PreOperationmsdyn_workorderUpdate.cs" company="">PreOperationmsdyn_workorderUpdate
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author>Hong Liu</author>
// <date>9/20/2018 10:21:27 AM</date>
// <summary>Implements the PreOperationmsdyn_workorderUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Linq;
using Microsoft.Xrm.Sdk;

namespace TSIS2.Plugins
{

    [CrmPluginRegistration(
    MessageNameEnum.Update,
    "msdyn_workorder",
    StageEnum.PreOperation,
    ExecutionModeEnum.Synchronous,
    "",
    "TSIS2.Plugins.PreOperationmsdyn_workorderUpdate Plugin",
    1,
    IsolationModeEnum.Sandbox,
    Description = "On Work Order Update, populate the Regulated Entity into the Billing Account using the selected Operation")]
    /// <summary>
    /// PreOperationmsdyn_workorderUpdate Plugin.
    /// </summary>    
    public class PreOperationmsdyn_workorderUpdate : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            // Obtain the tracing service
            ITracingService tracingService =
            (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));

            // The InputParameters collection contains all the data passed in the message request.
            if (context.InputParameters.Contains("Target") &&
                context.InputParameters["Target"] is Entity)
            {
                // Obtain the target entity from the input parameters.
                Entity target = (Entity)context.InputParameters["Target"];

                // Obtain the preimage entity
                Entity preImageEntity = (context.PreEntityImages != null && context.PreEntityImages.Contains("PreImage")) ? context.PreEntityImages["PreImage"] : null;

                // Obtain the organization service reference which you will need for
                // web service calls.
                IOrganizationServiceFactory serviceFactory =
                    (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

                try
                {
                    if (target.LogicalName.Equals(msdyn_workorder.EntityLogicalName))
                    {
                        if (target.Attributes.Contains("ovs_operationid") && target.Attributes["ovs_operationid"] != null)
                        {
                            EntityReference operation = (EntityReference)target.Attributes["ovs_operationid"];
                            using (var servicecontext = new Xrm(service))
                            {
                                var regulatedentity = (from tt in servicecontext.ovs_operationSet
                                                       where tt.Id == operation.Id
                                                       select new
                                                       {
                                                           tt.ts_stakeholder
                                                       }).FirstOrDefault();
                                if (regulatedentity != null)
                                {
                                    if (regulatedentity.ts_stakeholder != null && regulatedentity.ts_stakeholder.Id != null)
                                    {
                                        target.Attributes["msdyn_billingaccount"] = regulatedentity.ts_stakeholder;
                                    }
                                }
                            }
                        }
                        //If Case "msdyn_servicerequest" is Updated
                        if (target.Attributes.Contains("msdyn_servicerequest"))
                        {
                            using (var serviceContext = new Xrm(service))
                            {
                                // Cast the target to the expected entity
                                msdyn_workorder workOrder = target.ToEntity<msdyn_workorder>();

                                //Retrieve all findings associated to the current work order
                                var workOrderFindings = serviceContext.ovs_FindingSet.Where(f => f.ts_WorkOrder.Id == workOrder.Id).ToList();

                                if (workOrder.msdyn_ServiceRequest != null)
                                {
                                    //Change the reference to Case in each finding to the Work Order's new case
                                    foreach (ovs_Finding finding in workOrderFindings)
                                    {
                                        finding.ovs_CaseId = new EntityReference(Incident.EntityLogicalName, workOrder.msdyn_ServiceRequest.Id);
                                        serviceContext.UpdateObject(finding);
                                    }
                                }
                                else
                                {
                                    //Change the reference to Case in each finding to null
                                    foreach (ovs_Finding finding in workOrderFindings)
                                    {
                                        finding.ovs_CaseId = null;
                                        serviceContext.UpdateObject(finding);
                                    }
                                }
                                serviceContext.SaveChanges();
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    throw new InvalidPluginExecutionException(e.Message);
                }

            }
        }
    }
}