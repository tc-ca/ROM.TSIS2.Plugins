// <copyright file="PostOperationincidentCreate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author>Hong Liu</author>
// <date>9/20/2018 10:21:27 AM</date>
// <summary>Implements the PostOperationincidentCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Linq;
using Microsoft.Xrm.Sdk;

namespace TSIS2.Plugins
{

    [CrmPluginRegistration(
    MessageNameEnum.Update,
    "ts_securityincident",
    StageEnum.PreOperation,
    ExecutionModeEnum.Synchronous,
    "",
    "TSIS2.Plugins.PreOperation_securityincidentUpdate Plugin",
    1,
    IsolationModeEnum.Sandbox,
    Description = "The report dates will be adjusted based on selected timezone.")]
    /// <summary>
    /// PostOperationincidentCreate Plugin.
    /// </summary>    
    public class PreOperation_securityincidentUpdate : PluginBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperation_securityincidentUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreOperation_securityincidentUpdate(string unsecure, string secure)
            : base(typeof(PreOperation_securityincidentUpdate))
        {

        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            Entity target = (Entity)context.InputParameters["Target"];

            try
            {
                if (target.LogicalName.Equals(ts_securityincident.EntityLogicalName))
                {
                    ts_securityincident securityincident = target.ToEntity<ts_securityincident>();

                    using (var serviceContext = new Xrm(localContext.OrganizationService))
                    {
                        var securityincidentOriginal = serviceContext.ts_securityincidentSet.Where(si => si.Id == securityincident.Id).FirstOrDefault();
                        ts_timezone? timeZone = null;
                        if (target.Attributes.Contains("ts_timezone") && target.Attributes["ts_timezone"] != null)
                        {
                            timeZone = securityincident.ts_timezone.Value;
                        }
                        else if (securityincidentOriginal.ts_timezone.HasValue)
                        {
                            timeZone = securityincidentOriginal.ts_timezone.Value;
                        }

                        if (timeZone != null)
                        {
                            localContext.Trace("Time zone: " + timeZone.Value);
                            if (target.Attributes.Contains("ts_incidentdatetime") && target.Attributes["ts_incidentdatetime"] != null)
                            {
                                target.Attributes["ts_incidentdatetimeadjust"] = TimeZoneHelper.GetAdjustedDateTime(timeZone.Value, securityincident.ts_IncidentDateTime.Value);
                            }
                            else if (securityincidentOriginal.ts_IncidentDateTime.HasValue)
                            {
                                target.Attributes["ts_incidentdatetimeadjust"] = TimeZoneHelper.GetAdjustedDateTime(timeZone.Value, securityincidentOriginal.ts_IncidentDateTime.Value);
                            }

                            if (target.Attributes.Contains("ts_reporteddatetime") && target.Attributes["ts_reporteddatetime"] != null)
                            {
                                target.Attributes["ts_reporteddatetimeadjust"] = TimeZoneHelper.GetAdjustedDateTime(timeZone.Value, securityincident.ts_reporteddatetime.Value); ;
                            }
                            else if (securityincidentOriginal.ts_reporteddatetime.HasValue)
                            {
                                target.Attributes["ts_reporteddatetimeadjust"] = TimeZoneHelper.GetAdjustedDateTime(timeZone.Value, securityincidentOriginal.ts_reporteddatetime.Value);
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                throw new InvalidPluginExecutionException(e.Message);
            }

        }
    }
}