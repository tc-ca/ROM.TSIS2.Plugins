// <copyright file="PreOperationmsdyn_workorderUpdate.cs" company="">PreOperationmsdyn_workorderUpdate
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author>Hong Liu</author>
// <date>9/20/2018 10:21:27 AM</date>
// <summary>Implements the PreOperationts_questionnaireversionUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xrm.Sdk;

namespace TSIS2.Plugins
{

    [CrmPluginRegistration(
    MessageNameEnum.Update,
    "ts_questionnaireversion",
    StageEnum.PreOperation,
    ExecutionModeEnum.Synchronous,
    "",
    "TSIS2.Plugins.PreOperationts_questionnaireversionUpdate Plugin",
    1,
    IsolationModeEnum.Sandbox,
    Description = "On Questionnaire Version Update, populate the End Date of previous version")]
    /// <summary>
    /// PreOperationts_questionnaireversionUpdate Plugin.
    /// </summary>    
    public class PreOperationts_questionnaireversionUpdate : IPlugin
    {
        public void Execute(IServiceProvider serviceProvider)
        {
            // Obtain the tracing service
            ITracingService tracingService =
            (ITracingService)serviceProvider.GetService(typeof(ITracingService));

            // Obtain the execution context from the service provider.
            IPluginExecutionContext context = (IPluginExecutionContext)
                serviceProvider.GetService(typeof(IPluginExecutionContext));

            // The InputParameters collection contains all the data passed in the message request.
            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                // Obtain the target entity from the input parameters.
                Entity target = (Entity)context.InputParameters["Target"];

                // Obtain the preimage entity
                Entity preImageEntity = (context.PreEntityImages != null && context.PreEntityImages.Contains("PreImage")) ? context.PreEntityImages["PreImage"] : null;

                // Obtain the organization service reference which you will need for
                // web service calls.
                IOrganizationServiceFactory serviceFactory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                IOrganizationService service = serviceFactory.CreateOrganizationService(context.UserId);

                try
                {
                    if (target.LogicalName.Equals(ts_questionnaireversion.EntityLogicalName))
                    {
                        if (target.Attributes.Contains("ts_effectivestartdate") && target.Attributes["ts_effectivestartdate"] != null)
                        {
                            using (var serviceContext = new Xrm(service))
                            {
                                ts_questionnaireversion currentQuestionnaireVersion = target.ToEntity<ts_questionnaireversion>();
                                var questionnaireVersionList = new List<ts_questionnaireversion>();

                                // Get the selected Questionnaire Version
                                var selectedQuestionnaireVersion = serviceContext.ts_questionnaireversionSet.Where(qv => qv.Id == currentQuestionnaireVersion.Id).FirstOrDefault();

                                // Get the referenced Questionnaire
                                EntityReference questionnaireReference = new EntityReference(ovs_Questionnaire.EntityLogicalName, selectedQuestionnaireVersion.ts_ovs_questionnaire.Id);

                                // Lookup the referenced Questionnaire
                                ovs_Questionnaire questionnaire = serviceContext.ovs_QuestionnaireSet.Where(q => q.Id == questionnaireReference.Id).FirstOrDefault();

                                //List of Questionnaire Version for specific Questionnaire            
                                questionnaireVersionList = serviceContext.ts_questionnaireversionSet.Where(v => v.ts_ovs_questionnaire.Id == questionnaire.Id).ToList();

                                //Update End Date of previous version 
                                for (var i = 0; i < questionnaireVersionList.Count; i++)
                                {
                                    if (questionnaireVersionList[i].ts_effectiveenddate == null && questionnaireVersionList[i].ts_effectivestartdate != null && questionnaireVersionList[i].Id != selectedQuestionnaireVersion.Id && selectedQuestionnaireVersion.ts_effectiveenddate == null)
                                    {
                                        service.Update(new ts_questionnaireversion
                                        {
                                            Id = questionnaireVersionList[i].Id,
                                            ts_effectiveenddate = Convert.ToDateTime(currentQuestionnaireVersion.ts_effectivestartdate).AddDays(-1)
                                        });
                                    }

                                }
                            }
                        }
                    }
                }
                catch (Exception e)
                {
                    throw new InvalidPluginExecutionException(e.Message);
                }
            }
        }
    }
}