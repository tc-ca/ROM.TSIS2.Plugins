// <copyright file="PostOperationts_workorderactivitytypeUpdate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author>Hong Liu</author>
// <date>9/20/2018 10:21:27 AM</date>
// <summary>Implements the PostOperationts_workorderactivitytypeUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Linq;
using Microsoft.Xrm.Sdk;

namespace TSIS2.Plugins
{

    [CrmPluginRegistration(
    MessageNameEnum.Update,
    "ts_workorderactivitytype",
    StageEnum.PostOperation,
    ExecutionModeEnum.Synchronous,
    "ts_createworkorder",
    "TSIS2.Plugins.PostOperationts_workorderactivitytypeUpdate Plugin",
    1,
    IsolationModeEnum.Sandbox,
    Image1Name = "PostImage", Image1Type = ImageTypeEnum.PostImage, Image1Attributes = "ts_activitytypeid,ownerid,ts_workorderwizardid",
    Description = "Create Work Orders after changing 'Create Work Order' to Yes.")]
    /// <summary>
    /// PostOperationts_workorderactivitytypeUpdate Plugin.
    /// </summary>    
    public class PostOperationts_workorderactivitytypeUpdate : PluginBase
    {
        private readonly string postImageAlias = "PostImage";

        /// <summary>
        /// Initializes a new instance of the <see cref="PostOperationts_workorderactivitytypeUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PostOperationts_workorderactivitytypeUpdate(string unsecure, string secure)
            : base(typeof(PostOperationts_workorderactivitytypeUpdate))
        {
            //if (secure != null &&!secure.Equals(string.Empty))
            //{

            //}
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            Entity target = (Entity)context.InputParameters["Target"];
            Entity postImageEntity = (context.PostEntityImages != null && context.PostEntityImages.Contains(this.postImageAlias)) ? context.PostEntityImages[this.postImageAlias] : null;

            try
            {
                if (target.LogicalName.Equals(ts_workorderactivitytype.EntityLogicalName))
                {
                    if (target.Attributes.Contains("ts_createworkorder") && target.Attributes["ts_createworkorder"] != null &&
                        postImageEntity.Attributes.Contains("ts_activitytypeid") && postImageEntity.Attributes["ts_activitytypeid"] != null &&
                        postImageEntity.Attributes.Contains("ownerid") && postImageEntity.Attributes["ownerid"] != null &&
                        postImageEntity.Attributes.Contains("ts_workorderwizardid") && postImageEntity.Attributes["ts_workorderwizardid"] != null)
                    {
                        bool createworkorder = (bool)target.Attributes["ts_createworkorder"];
                        EntityReference activitytype = (EntityReference)postImageEntity.Attributes["ts_activitytypeid"];
                        EntityReference workorderwizard = (EntityReference)postImageEntity.Attributes["ts_workorderwizardid"];
                        EntityReference owner = (EntityReference)postImageEntity.Attributes["ownerid"];

                        if (createworkorder)
                        {
                            using (var servicecontext = new Xrm(localContext.OrganizationService))
                            {
                                var workordercreationwizards = (from tt in servicecontext.ts_workordercreationwizardSet
                                                                where tt.ts_workordercreationwizardId.Value == workorderwizard.Id
                                                                select new
                                                                {
                                                                    tt.ts_CaseId,
                                                                    tt.ts_CountryId,
                                                                    tt.ts_FunctionalLocationId,
                                                                    tt.ts_OperationId,
                                                                    tt.ts_RegionId,
                                                                    tt.ts_SiteId,
                                                                    tt.ts_StakeholderId,
                                                                    tt.ts_OperationTypeId,
                                                                    tt.ts_WorkOrderTypeId
                                                                }).FirstOrDefault();

                                if (workordercreationwizards != null)
                                {
                                    msdyn_workorder workorder = new msdyn_workorder();
                                    workorder.msdyn_ServiceRequest = workordercreationwizards.ts_CaseId;
                                    workorder.ts_Country = workordercreationwizards.ts_CountryId;
                                    workorder.msdyn_FunctionalLocation = workordercreationwizards.ts_FunctionalLocationId;
                                    workorder.ovs_asset = workordercreationwizards.ts_OperationId;
                                    workorder.msdyn_ServiceTerritory = workordercreationwizards.ts_RegionId;
                                    workorder.ts_Region = workordercreationwizards.ts_RegionId;
                                    workorder.ts_Site = workordercreationwizards.ts_SiteId;
                                    workorder.ovs_AssetCategory = workordercreationwizards.ts_OperationTypeId;
                                    workorder.msdyn_ServiceAccount = workordercreationwizards.ts_StakeholderId;
                                    workorder.msdyn_WorkOrderType = workordercreationwizards.ts_WorkOrderTypeId;
                                    workorder.msdyn_PrimaryIncidentType = activitytype;
                                    workorder.ts_WorkOrderCreationWizardId = workorderwizard;
                                    workorder.OwnerId = owner;
                                    localContext.OrganizationService.Create(workorder);
                                }
                            }
                        }
                        else
                        {

                        }
                    }
                }
            }
            catch (Exception e)
            {
                throw new InvalidPluginExecutionException(e.Message);
            }
        }
    }
}