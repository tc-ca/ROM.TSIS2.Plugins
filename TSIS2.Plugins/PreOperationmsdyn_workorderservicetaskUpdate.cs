// <copyright file="PostOperationmsdyn_workorderservicetaskUpdate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author>Hong Liu</author>
// <date>9/20/2018 10:21:27 AM</date>
// <summary>Implements the PostOperationmsdyn_workorderservicetaskUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Runtime.Serialization.Json;
using System.ServiceModel;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.Xrm.Sdk;
using TSIS2.Common;

namespace TSIS2.Plugins
{

    [CrmPluginRegistration(
    MessageNameEnum.Update,
    "msdyn_workorderservicetask",
    StageEnum.PreOperation,
    ExecutionModeEnum.Synchronous,
    "",
    "PostOperationmsdyn_workorderservicetaskUpdate Plugin",
    1,
    IsolationModeEnum.Sandbox)]
    /// <summary>
    /// PostOperationmsdyn_workorderservicetaskUpdate Plugin.
    /// </summary>    
    public class PreOperationmsdyn_workorderservicetaskUpdate : PluginBase
    {
        private readonly string preImageAlias = "PreImage";

        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperationmsdyn_workorderservicetaskUpdate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreOperationmsdyn_workorderservicetaskUpdate(string unsecure, string secure)
            : base(typeof(PreOperationmsdyn_workorderservicetaskUpdate))
        {
            //if (secure != null &&!secure.Equals(string.Empty))
            //{

            //}
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            Entity target = (Entity)context.InputParameters["Target"];
            //Entity postImageEntity = (context.PostEntityImages != null && context.PostEntityImages.Contains(this.postImageAlias)) ? context.PostEntityImages[this.postImageAlias] : null;
            Entity preImageEntity = (context.PreEntityImages != null && context.PreEntityImages.Contains(this.preImageAlias)) ? context.PreEntityImages[this.preImageAlias] : null;

            try
            {
                if (target.LogicalName.Equals(msdyn_workorderservicetask.EntityLogicalName))
                {
                    if (target.Attributes.Contains("msdyn_inspectiontaskresult") && target.Attributes["msdyn_inspectiontaskresult"] != null 
                        && preImageEntity.Attributes.Contains("msdyn_workorder") && preImageEntity.Attributes["msdyn_workorder"] != null)
                    {
                        int inspectiontaskresult = ((OptionSetValue)target.Attributes["msdyn_inspectiontaskresult"]).Value;
                        if (inspectiontaskresult == (int)msdyn_InspectionResult.Fail)
                        {
                            EntityReference stworkorder = (EntityReference)preImageEntity.Attributes["msdyn_workorder"];
                            using (var servicecontext = new CrmServiceContext(localContext.OrganizationService))
                            {
                                var workorder = (from tt in servicecontext.msdyn_workorderSet
                                                 where tt.Id == stworkorder.Id
                                                 select new
                                                 {
                                                     tt.msdyn_BillingAccount,
                                                     tt.msdyn_name,
                                                     tt.msdyn_ServiceRequest
                                                 }).FirstOrDefault();
                                if (workorder != null && workorder.msdyn_ServiceRequest == null)
                                {
                                    Incident newIncident = new Incident();
                                    newIncident.CustomerId = workorder.msdyn_BillingAccount;
                                    newIncident.Title = workorder.msdyn_BillingAccount.Name + " Work Order " + workorder.msdyn_name + " Inspection Failed on " + DateTime.Now.ToString("dd-MM-yy");
                                    Guid newIncidentId = localContext.OrganizationService.Create(newIncident);
                                    msdyn_workorder uWorkOrder = new msdyn_workorder();
                                    uWorkOrder.Id = stworkorder.Id;
                                    uWorkOrder.msdyn_ServiceRequest = new EntityReference(Incident.EntityLogicalName, newIncidentId);
                                    localContext.OrganizationService.Update(uWorkOrder);
                                    target.Attributes["ovs_caseid"] = new EntityReference(Incident.EntityLogicalName, newIncidentId);
                                }
                                else if (workorder != null && workorder.msdyn_ServiceRequest != null)
                                {
                                    target.Attributes["ovs_caseid"] = workorder.msdyn_ServiceRequest;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                throw new InvalidPluginExecutionException(e.Message);
            }
        }
    }
}