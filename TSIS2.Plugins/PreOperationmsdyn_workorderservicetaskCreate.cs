// <copyright file="PostOperationmsdyn_workorderservicetaskCreate.cs" company="">
// Copyright (c) 2018 All Rights Reserved
// </copyright>
// <author>Hong Liu</author>
// <date>9/20/2018 10:21:27 AM</date>
// <summary>Implements the PostOperationmsdyn_workorderservicetaskCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Runtime.Serialization.Json;
using System.ServiceModel;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.Xrm.Sdk;
using TSIS2.Common;

namespace TSIS2.Plugins
{

    [CrmPluginRegistration(
    MessageNameEnum.Create,
    "msdyn_workorderservicetask",
    StageEnum.PreOperation,
    ExecutionModeEnum.Synchronous,
    "",
    "PostOperationmsdyn_workorderservicetaskCreate Plugin",
    1,
    IsolationModeEnum.Sandbox)]
    /// <summary>
    /// PostOperationmsdyn_workorderservicetaskCreate Plugin.
    /// </summary>    
    public class PreOperationmsdyn_workorderservicetaskCreate : PluginBase
    {
        //private readonly string postImageAlias = "PostImage";

        /// <summary>
        /// Initializes a new instance of the <see cref="PreOperationmsdyn_workorderservicetaskCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreOperationmsdyn_workorderservicetaskCreate(string unsecure, string secure)
            : base(typeof(PreOperationmsdyn_workorderservicetaskCreate))
        {
            //if (secure != null &&!secure.Equals(string.Empty))
            //{

            //}
        }

        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected override void ExecuteCrmPlugin(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            Entity target = (Entity)context.InputParameters["Target"];
            //Entity postImageEntity = (context.PostEntityImages != null && context.PostEntityImages.Contains(this.postImageAlias)) ? context.PostEntityImages[this.postImageAlias] : null;

            try
            {
                if (target.LogicalName.Equals(msdyn_workorderservicetask.EntityLogicalName))
                {
                    if (target.Attributes.Contains("msdyn_tasktype") && target.Attributes["msdyn_tasktype"] != null
                        && (!target.Attributes.Contains("ovs_questionnaire") || target.Attributes["ovs_questionnaire"] != null))
                    {
                        EntityReference tasktype = (EntityReference)target.Attributes["msdyn_tasktype"];
                        using (var servicecontext = new CrmServiceContext(localContext.OrganizationService))
                        {
                            var servicetasktype = (from tt in servicecontext.msdyn_servicetasktypeSet
                                                   where tt.Id == tasktype.Id
                                                   select new
                                                   {
                                                       tt.ovs_Questionnaire
                                                      }).FirstOrDefault();
                            if (servicetasktype != null)
                            {
                                target.Attributes["ovs_questionnaire"] = servicetasktype.ovs_Questionnaire;
                                if (servicetasktype.ovs_Questionnaire != null && servicetasktype.ovs_Questionnaire.Id != null)
                                {
                                    Entity q = localContext.OrganizationService.Retrieve("ovs_questionnaire", servicetasktype.ovs_Questionnaire.Id,
                                        new Microsoft.Xrm.Sdk.Query.ColumnSet("ovs_questionnairedefinition"));
                                    //var questionnaire = (from q in servicecontext.ovs_QuestionnaireSet
                                    //                       where q.Id == servicetasktype.ovs_Questionnaire.Id
                                    //                     select new
                                    //                       {
                                    //                           q.Id
                                    //                       }).FirstOrDefault();
                                    target.Attributes["ovs_questionnairedefinition"] = q.Attributes["ovs_questionnairedefinition"].ToString();
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                throw new InvalidPluginExecutionException(e.Message);
            }
        }
    }
}